// Generated by CoffeeScript 1.6.3
(function() {
  this.Game = (function() {
    function _Class() {
      console.log("Initialization of Game");
    }

    _Class.prototype.init_game = function(scope) {
      var i, _i, _ref, _results;
      this.game_finished = false;
      this.mrender = new window.MapRenderer;
      this.map = this.mrender.render(tile_no_x, tile_no_y);
      this.scope = scope;
      this.player_counter = 0;
      this.last_move_time = new Date;
      this.players = new Array;
      _results = [];
      for (i = _i = 0, _ref = max_players - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.spawn_new_player());
      }
      return _results;
    };

    _Class.prototype.get_player = function(x) {
      if (x < this.players.length) {
        return this.players[x];
      } else {
        return null;
      }
    };

    _Class.prototype.get_map = function() {
      return this.map;
    };

    _Class.prototype.game_loop = function() {
      var delta, i, ind, now, p, _i, _ref;
      if (this.game_finished) {
        return true;
      }
      now = new Date;
      delta = now - this.last_move_time;
      if (delta > frame_step) {
        this.last_move_time = now;
        for (i = _i = 0, _ref = this.players.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          p = this.players[i];
          if (p.state !== PSTATE_DEATH) {
            p.do_action();
          } else {
            p.respawn_timeout -= 1;
            if (p.respawn_timeout <= 0) {
              this.respawn_player(p);
            }
          }
        }
        ind = Math.floor(Math.random() * 100);
        if (ind <= powerup_spawn_percent) {
          this.spawn_powerup();
        }
        return this.scope.update_ui();
      }
    };

    _Class.prototype.spawn_new_player = function() {
      var good, p, posx, posy;
      if (this.players.length >= max_players) {
        return;
      }
      p = new Player;
      p.init();
      p.name = 'Player ' + (this.player_counter++);
      good = false;
      while (!good) {
        posx = get_random_int(0, this.map.width - 1);
        posy = get_random_int(0, this.map.height - 1);
        if (this.map.is_tile_walkable(posx, posy)) {
          if (this.map.is_tile_free(posx, posy)) {
            good = true;
            p.set_position(posx, posy);
          }
        }
      }
      this.players.push(p);
      this.scope.new_event("primary", p.name + " has been spawned");
      return this.map.add_game_object(p);
    };

    _Class.prototype.respawn_player = function(pl) {
      var good, posx, posy;
      pl.set_initial_state();
      good = false;
      while (!good) {
        posx = get_random_int(0, this.map.width - 1);
        posy = get_random_int(0, this.map.height - 1);
        if (this.map.is_tile_walkable(posx, posy)) {
          if (this.map.is_tile_free(posx, posy)) {
            good = true;
            pl.set_position(posx, posy);
          }
        }
      }
      this.scope.new_event("default", pl.name + " has been respawned");
      return this.map.add_game_object(pl);
    };

    _Class.prototype.spawn_powerup = function() {
      var good, p, posx, posy, type;
      type = get_random_int(0, 3);
      if (type === 0) {
        p = new HealthPowerUp;
      } else if (type === 1) {
        p = new FirepowerPowerUp;
      } else if (type === 2) {
        p = new ArmorPowerUp;
      } else {
        p = new SpeedPowerUp;
      }
      p.init();
      good = false;
      while (!good) {
        posx = get_random_int(0, this.map.width - 1);
        posy = get_random_int(0, this.map.height - 1);
        if (this.map.is_tile_free(posx, posy)) {
          if (this.map.is_tile_walkable(posx, posy)) {
            if (this.map.get_tile_object(posx, posy) === null) {
              good = true;
              p.set_position(posx, posy);
            }
          }
        }
      }
      return p.add_to_game();
    };

    _Class.prototype.player_death = function(pl) {
      var ind;
      ind = $.inArray(pl, this.players);
      this.map.remove_game_object(pl);
      this.scope.new_event("danger", pl.name + " died");
      pl.state = PSTATE_DEATH;
      return pl.respawn_timeout = get_random_int(10, 20);
    };

    _Class.prototype.player_won = function(pl) {
      this.game_finished = true;
      this.scope.new_event("success", pl.name + " has won the game!!!");
      return this.scope.is_game_running = false;
    };

    return _Class;

  })();

}).call(this);
